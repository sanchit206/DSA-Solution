{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1463ef34-e98d-4d63-a196-8bcb805d34f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "[10]\n",
      "[10, 20]\n",
      "[10, 20, 30]\n",
      "False\n",
      "[10, 20]\n",
      "[10]\n",
      "[]\n",
      "True\n"
     ]
    }
   ],
   "source": [
    "#Implement a stack using a list in Python. Include the necessary methods such as push, pop, and isEmpty.\n",
    "\n",
    "#creating a stack\n",
    "stack=[]\n",
    "\n",
    "#creating a isEmpty method\n",
    "def isEmpty(stack):\n",
    "    if(len(stack)==0):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "#checking stack is empty or not\n",
    "print(isEmpty(stack))\n",
    "    \n",
    "#creting a push method\n",
    "def push(item):\n",
    "    stack.append(item)\n",
    "\n",
    "#pushing elements in stack\n",
    "push(10)\n",
    "print(stack)\n",
    "\n",
    "push(20)\n",
    "print(stack)\n",
    "\n",
    "push(30)\n",
    "print(stack)\n",
    "\n",
    "#checking stack is empty or not\n",
    "print(isEmpty(stack))\n",
    "\n",
    "#creating a pop method\n",
    "def pop():\n",
    "    if isEmpty(stack):\n",
    "        return (\"stack is empty\")\n",
    "    else:\n",
    "        stack.pop()\n",
    "\n",
    "#poping elements in stack\n",
    "pop() #pop() 30\n",
    "print(stack)\n",
    "\n",
    "pop() #pop() 20\n",
    "print(stack)\n",
    "\n",
    "pop() #pop() 10\n",
    "print(stack)\n",
    "\n",
    "#again checking stack is empty or not\n",
    "print(isEmpty(stack))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "fc413107-24a6-45eb-be5c-ef16948009b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n",
      "[10]\n",
      "[10, 20]\n",
      "False\n",
      "[20, 30, [...]]\n",
      "[30, [...]]\n",
      "[[...]]\n",
      "False\n"
     ]
    }
   ],
   "source": [
    "#Implement a queue using a list in Python. Include the necessary methods such as enqueue, dequeue, and isEmpty.\n",
    "\n",
    "#creating a queue\n",
    "queue=[]\n",
    "\n",
    "#creating a isEmpty method\n",
    "def isEmpty(queue):\n",
    "    if(len(queue)==0):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "#checking queue is empty or not\n",
    "print(isEmpty(queue))\n",
    "\n",
    "#creting a enqueue method\n",
    "def enqueue(item):\n",
    "    queue.append(item)\n",
    "\n",
    "#pushing elements in queue\n",
    "enqueue(10)\n",
    "print(queue)\n",
    "\n",
    "enqueue(20)\n",
    "print(queue)\n",
    "\n",
    "push(30)\n",
    "enqueue(queue)\n",
    "\n",
    "#checking queue is empty or not\n",
    "print(isEmpty(queue))\n",
    "\n",
    "#creating a dequeue method\n",
    "def dequeue():\n",
    "    if isEmpty(queue):\n",
    "        return (\"queue is empty\")\n",
    "    else:\n",
    "        queue.pop(0)\n",
    "\n",
    "#poping elements in stack\n",
    "dequeue() \n",
    "print(queue)\n",
    "\n",
    "dequeue() \n",
    "print(queue)\n",
    "\n",
    "dequeue() \n",
    "print(queue)\n",
    "\n",
    "#again checking queue is empty or not\n",
    "print(isEmpty(queue))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
